# -*- coding: utf-8 -*-
"""PDFs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YmJcKcbbCMeUKoiIMsRVaVRFKgpehJ1V
"""

!pip install pdfplumber openpyxl

import pdfplumber
import re
import pandas as pd
from google.colab import files

#Subida de archivos pdf
uploaded = files.upload()
pdfs = [f for f in uploaded if f.endswith(".pdf")]

# OTRO INTENTO :'vvv QUE ES EL FINAL

# Extraer encabezado general
def extraer_encabezado(texto):
    empresa = re.search(r'NOMBRE\s+EMPRESA\s*:\s*(.+)', texto)
    nit = re.search(r'NIT\s*(\d+)', texto)
    poliza = re.search(r'NUMERO\s+DE\s+POLIZA\s*(\d+)', texto)
    periodo = re.search(r'PERIODO\s+DE\s+COTIZACION\s*(\d+)', texto)
    return {
        'empresa': empresa.group(1).strip() if empresa else "",
        'nit': nit.group(1) if nit else "",
        'poliza': poliza.group(1) if poliza else "",
        'periodo': periodo.group(1) if periodo else ""
    }

# Verifica si una página tiene sección 1
def pagina_con_seccion_1(pagina):
    texto = pagina.extract_text()
    return bool(re.search(r'1\.\s*TRABAJADORES\s+AFILIADOS.*NO\s+PRESENTAN\s+PAGO', texto or "", re.IGNORECASE))

# Regex que separa los campos correctamente
patron_trabajador = re.compile(
    r'^(?P<tipo_id>CC|TI|CE|NIT|PT|PE)\s+'
    r'(?P<numero_id>\d+)\s+'
    r'(?P<tipo_cotizante>\d+\s-\s\w+)\s+'
    r'(?P<nombre>.*?)\s+(?P<estado>ING|RET|NO\s*SE\s*ENC(?:O|ON|ONT|ONTR|ONTRA|ONTRÓ)?|\bNO\b|No\s*se\s*enco)\s+' # Añadido "No\s*se\s*enco"
    r'(?P<fecha_inicio>\d{2}/\d{2}/\d{4})'
    r'(?:\s+(?P<fecha_fin>\d{2}/\d{2}/\d{4}))?'
    r'\s+(?P<centro_trabajo>\d+\s-\s.+?)'
    r'\s+(?P<tasa>\d+,\d+%|\d+\.\d+%)'
    r'\s+(?P<periodo>\d{6})'
    r'\s+(?P<diferencias>[\d.,]+)$',
    re.IGNORECASE
)

# Lista donde se guarda la info
datos_trabajadores = []

for pdf_file in pdfs:
    with pdfplumber.open(pdf_file) as pdf:
        texto_completo = "\n".join([p.extract_text() or "" for p in pdf.pages])
        encabezado = extraer_encabezado(texto_completo)

        for pagina in pdf.pages:
            if pagina_con_seccion_1(pagina):
                texto = pagina.extract_text()
                for linea in texto.split("\n"):
                    linea_original = linea.strip()
                    linea = linea_original

                    # Normalización del estado "NO SE ENC"
                    linea = re.sub(r'\bNo\s*se\s*enco\b', 'NO SE ENC', linea, re.IGNORECASE) #Más específico

                    # Manejo de nombres faltantes
                    if re.search(r'\b(CC|TI|CE|NIT|PT|PE)\s+\d+\s+\d+\s-\s\w+\s+(ING|RET|NO\s*SE\s*ENC|\bNO\b)', linea, re.IGNORECASE):
                        linea = re.sub(
                            r'(\b\d+\s+-\s+\w+)\s+(ING|RET|NO\s*SE\s*ENC|\bNO\b)',
                            r'\1 __SIN_NOMBRE__ \2',
                            linea,
                            re.IGNORECASE
                        )

                    match = patron_trabajador.search(linea)
                    if not match:
                        print("NO MATCH:", linea)
                    if match:
                        grupo = match.groupdict()
                        datos_trabajadores.append({
                            'Archivo': pdf_file,
                            'Empresa': encabezado['empresa'],
                            'NIT': encabezado['nit'],
                            'Póliza': encabezado['poliza'],
                            'Período': encabezado['periodo'],
                            'Tipo ID': grupo.get("tipo_id", ""),
                            'Número ID': grupo.get("numero_id", ""),
                            'Tipo de Cotizante': grupo.get("tipo_cotizante", ""),
                            'Nombres y Apellidos': grupo.get("nombre", "").replace("__SIN_NOMBRE__", "").strip(),
                            'Estado de tr': grupo.get("estado", ""),
                            'Fecha Inicio Cobertura': grupo.get("fecha_inicio", ""),
                            'Fecha Fin Cobertura': grupo.get("fecha_fin", ""),  # opcional
                            'Centro Trabajo': grupo.get("centro_trabajo", ""),
                            'Tasa de Cotizacion': grupo.get("tasa", ""),
                            'Período de Mora': grupo.get("periodo", ""),
                            'Diferencias Pendientes': grupo.get("diferencias", "")
                        })

# Exportar a Excel
df_final = pd.DataFrame(datos_trabajadores)
df_final.to_excel("afiliados_sin_pago_ordenado.xlsx", index=False)
files.download("afiliados_sin_pago_ordenado.xlsx")